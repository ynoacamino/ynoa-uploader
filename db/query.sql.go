// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"
)

const createFile = `-- name: CreateFile :one
INSERT INTO file (
  file_name,
  file_url,
  user_id,
  public
) VALUES (
  $1,
  $2,
  $3,
  $4
)
RETURNING file_id, file_name, file_url, public, user_id, created_at, updated_at
`

type CreateFileParams struct {
	FileName string
	FileUrl  string
	UserID   string
	Public   bool
}

func (q *Queries) CreateFile(ctx context.Context, arg CreateFileParams) (File, error) {
	row := q.db.QueryRow(ctx, createFile,
		arg.FileName,
		arg.FileUrl,
		arg.UserID,
		arg.Public,
	)
	var i File
	err := row.Scan(
		&i.FileID,
		&i.FileName,
		&i.FileUrl,
		&i.Public,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFile = `-- name: DeleteFile :one
DELETE FROM file
WHERE
  file_id = $1
RETURNING file_id, file_name, file_url, public, user_id, created_at, updated_at
`

func (q *Queries) DeleteFile(ctx context.Context, fileID int32) (File, error) {
	row := q.db.QueryRow(ctx, deleteFile, fileID)
	var i File
	err := row.Scan(
		&i.FileID,
		&i.FileName,
		&i.FileUrl,
		&i.Public,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPrivateFiles = `-- name: GetPrivateFiles :many
SELECT
  file_id, file_name, file_url, public, user_id, created_at, updated_at
FROM
  file
WHERE
  user_id = $1
ORDER BY
  updated_at DESC
`

func (q *Queries) GetPrivateFiles(ctx context.Context, userID string) ([]File, error) {
	rows, err := q.db.Query(ctx, getPrivateFiles, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.FileID,
			&i.FileName,
			&i.FileUrl,
			&i.Public,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPublicFiles = `-- name: GetPublicFiles :many
SELECT
  file_id, file_name, file_url, public, user_id, created_at, updated_at
FROM
  file
WHERE
  public = true
ORDER BY
  updated_at DESC
`

func (q *Queries) GetPublicFiles(ctx context.Context) ([]File, error) {
	rows, err := q.db.Query(ctx, getPublicFiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.FileID,
			&i.FileName,
			&i.FileUrl,
			&i.Public,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFile = `-- name: UpdateFile :one
UPDATE file
SET
  file_name = $2,
  public = $3,
  updated_at = CURRENT_TIMESTAMP
WHERE
  file_id = $1
RETURNING file_id, file_name, file_url, public, user_id, created_at, updated_at
`

type UpdateFileParams struct {
	FileID   int32
	FileName string
	Public   bool
}

func (q *Queries) UpdateFile(ctx context.Context, arg UpdateFileParams) (File, error) {
	row := q.db.QueryRow(ctx, updateFile, arg.FileID, arg.FileName, arg.Public)
	var i File
	err := row.Scan(
		&i.FileID,
		&i.FileName,
		&i.FileUrl,
		&i.Public,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
